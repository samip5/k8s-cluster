---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: update-ingress-annotations
  annotations:
    policies.kyverno.io/title: Update ingress annotations
    policies.kyverno.io/subject: Ingress
    policies.kyverno.io/description: >-
      This policy creates auth annotations on ingresses, external-dns,
      and sets an explicit RFC1918 whitelist for any ingresses
      that are not not exposed to the internet.
spec:
  mutateExistingOnPolicyUpdate: true
  generateExistingOnPolicyUpdate: true
  rules:
    - name: auth-dev
      match:
        any:
          - resources:
              kinds:
                - Ingress
              annotations:
                auth-dev.home.arpa/enabled: "true"
      mutate:
        patchStrategicMerge:
          metadata:
            annotations:
              +(nginx.ingress.kubernetes.io/auth-method): GET
              +(nginx.ingress.kubernetes.io/auth-url): http://[2001:67c:1be8::56]:40118/api/verify
              +(nginx.ingress.kubernetes.io/auth-signin): https://sso.${DEV_DOMAIN}?rm=$request_method
              +(nginx.ingress.kubernetes.io/auth-response-headers): Remote-User,Remote-Groups
              +(nginx.ingress.kubernetes.io/auth-snippet): proxy_set_header X-Forwarded-Method $request_method;

    - name: auth-fi
      match:
        any:
          - resources:
              kinds:
                - Ingress
              annotations:
                auth-fi.home.arpa/enabled: "true"

      mutate:
        patchStrategicMerge:
          metadata:
            annotations:
              +(nginx.ingress.kubernetes.io/auth-method): GET
              +(nginx.ingress.kubernetes.io/auth-url): http://[2001:67c:1be8::56]:40119/api/verify
              +(nginx.ingress.kubernetes.io/auth-signin): https://sso.${MAIN_DOMAIN}?rm=$request_method
              +(nginx.ingress.kubernetes.io/auth-response-headers): Remote-User,Remote-Groups
              +(nginx.ingress.kubernetes.io/auth-snippet): proxy_set_header X-Forwarded-Method $request_method;

    - name: auth-basic-fi
      match:
        any:
          - resources:
              kinds:
                - Ingress
              annotations:
                auth-basic-fi.home.arpa/enabled: "true"

      mutate:
        patchStrategicMerge:
          metadata:
            annotations:
              +(nginx.org/server-snippets): |
                set $upstream_authelia http://[2001:67c:1be8::56]:40119/api/verify?auth=basic;
              +(nginx.org/location-snippets): |
                # Virtual endpoint created by nginx to forward auth requests.
                location /authelia-basic {
                    ## Essential Proxy Configuration
                    internal;
                    proxy_pass $upstream_authelia;

                    ## Headers
                    ## The headers starting with X-* are required.
                    proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
                    proxy_set_header X-Forwarded-Method $request_method;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header X-Forwarded-Host $http_host;
                    proxy_set_header X-Forwarded-Uri $request_uri;
                    proxy_set_header X-Forwarded-For $remote_addr;
                    proxy_set_header Content-Length "";
                    proxy_set_header Connection "";

                    ## Basic Proxy Configuration
                    proxy_pass_request_body off;
                    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503; # Timeout if the real server is dead
                    proxy_redirect http:// $scheme://;
                    proxy_http_version 1.1;
                    proxy_cache_bypass $cookie_session;
                    proxy_no_cache $cookie_session;
                    proxy_buffers 4 32k;
                    client_body_buffer_size 128k;

                    ## Advanced Proxy Configuration
                    send_timeout 5m;
                    proxy_read_timeout 240;
                    proxy_send_timeout 240;
                    proxy_connect_timeout 240;
                }
                
                ## Send a subrequest to Authelia to verify if the user is authenticated and has permission to access the resource.
                auth_request /authelia-basic;

                ## Set the $target_url variable based on the original request.
                auth_request_set $target_url $scheme://$http_host$request_uri;

                ## Save the upstream response headers from Authelia to variables.
                auth_request_set $user $upstream_http_remote_user;
                auth_request_set $groups $upstream_http_remote_groups;
                auth_request_set $name $upstream_http_remote_name;
                auth_request_set $email $upstream_http_remote_email;

                ## Inject the response headers from the variables into the request made to the backend.
                proxy_set_header Remote-User $user;
                proxy_set_header Remote-Groups $groups;
                proxy_set_header Remote-Name $name;
                proxy_set_header Remote-Email $email;

    - name: external-dns
      match:
        any:
          - resources:
              kinds:
                - Ingress
              annotations:
                external-dns.target/enabled: "true"
      mutate:
        patchStrategicMerge:
          metadata:
            annotations:
              +(external-dns.alpha.kubernetes.io/target): r.home.${MAIN_DOMAIN}

    - name: whitelist-source-range
      match:
        any:
          - resources:
              kinds:
                - Ingress
      exclude:
        any:
          - resources:
              annotations:
                external-dns.home.arpa/enabled: "true"
          - resources:
              annotations:
                external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          - resources:
              annotations:
                auth-basic-fi.home.arpa/enabled: "true"
      mutate:
        patchStrategicMerge:
          metadata:
            annotations:
              +(nginx.ingress.kubernetes.io/whitelist-source-range): "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,2001:14ba:16d6:a6aa::/64,2001:67c:1104::/48,2001:67c:1be8::/48"
