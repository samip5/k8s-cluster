{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P7D7E27EDDA4DFA74"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 3,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 8,
        "x": 3,
        "y": 0
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.3.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesHumidity = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"%\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"outdoor_shade_humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesHumidity = RawSeriesHumidity\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Humidity in shade (%)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesHumidity |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesShadeTemperature = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"°C\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"outdoor_shade_temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\nNamedSeriesShadeTemperature = RawSeriesShadeTemperature\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Temperature in shade (°C)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesShadeTemperature |> yield()",
          "refId": "D"
        }
      ],
      "title": "Outside Weather (Shade)",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P7D7E27EDDA4DFA74"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 3,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 8,
        "x": 11,
        "y": 0
      },
      "id": 10,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.3.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeries = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"°C\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"outdoor_sensor_temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeries = RawSeries\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Temperature (°C)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeries |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesHumidity = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"%\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"outdoor_sensor_humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesHumidity = RawSeriesHumidity\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Humidity (%)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesHumidity |> yield()",
          "refId": "D"
        }
      ],
      "title": "Outside Weather",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P7D7E27EDDA4DFA74"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 3,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 9,
        "x": 3,
        "y": 9
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.3.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeries = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"°C\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"bathroom_sensor_temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeries = RawSeries\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Temperature in Bathroom (°C)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeries |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeries = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"°C\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"bedroom_sensor_temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeries = RawSeries\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Temperature in Bedroom (°C)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeries |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeries = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"°C\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"living_room_temperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeries = RawSeries\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Temperature in LivingRoom (°C)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeries |> yield()",
          "refId": "B"
        }
      ],
      "title": "Temperature inside Apartment",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P7D7E27EDDA4DFA74"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 3,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 8,
        "x": 12,
        "y": 9
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.3.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesHumidity = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"%\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"living_room_humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesHumidity = RawSeriesHumidity\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Humidity in Living Room (%)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesHumidity |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesHumidity = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"%\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"bedroom_sensor_humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesHumidity = RawSeriesHumidity\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Humidity in Bathroom (%)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesHumidity |> yield()",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesHumidity = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"%\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"bathroom_sensor_humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesHumidity = RawSeriesHumidity\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Humidity in Bedroom (%)\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesHumidity |> yield()",
          "refId": "C"
        }
      ],
      "title": "Humidity inside Apartment",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P7D7E27EDDA4DFA74"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/paristo$/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "rgba(245, 54, 54, 0.9)",
                      "value": null
                    },
                    {
                      "color": "rgba(237, 129, 40, 0.89)",
                      "value": 1
                    },
                    {
                      "color": "rgba(50, 172, 45, 0.97)",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "pk"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Valvonta"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "custom.align"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "rgba(245, 54, 54, 0.9)",
                      "value": null
                    },
                    {
                      "color": "#FADE2A",
                      "value": 0
                    },
                    {
                      "color": "rgba(50, 172, 45, 0.97)",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "voltage"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Jännite"
              },
              {
                "id": "unit",
                "value": "volt"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "custom.align"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "rgba(245, 54, 54, 0.9)",
                      "value": null
                    },
                    {
                      "color": "rgba(237, 129, 40, 0.89)",
                      "value": 12
                    },
                    {
                      "color": "rgba(50, 172, 45, 0.97)",
                      "value": 14
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "internet_ok"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Internet"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.displayMode",
                "value": "color-text"
              },
              {
                "id": "custom.align"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "rgba(245, 54, 54, 0.9)",
                      "value": null
                    },
                    {
                      "color": "rgba(237, 129, 40, 0.89)",
                      "value": 1
                    },
                    {
                      "color": "rgba(50, 172, 45, 0.97)",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 15,
        "x": 6,
        "y": 16
      },
      "id": 8,
      "links": [],
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "8.3.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesShade = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mV\")\n  |> filter(fn: (r) => r[\"_field\"] == \"battery\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"outdoor_shade_voltage\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesShade = RawSeriesShade\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Outdoor Shade\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesShade |> yield()",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeries = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mV\")\n  |> filter(fn: (r) => r[\"_field\"] == \"battery\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"outdoor_sensor_voltage\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeries = RawSeries\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Outdoor\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeries |> yield()",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesLivingRoom = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mV\")\n  |> filter(fn: (r) => r[\"_field\"] == \"battery\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"living_room_voltage\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesLivingRoom = RawSeriesLivingRoom\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Living Room\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesLivingRoom |> yield()",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesBedroom = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mV\")\n  |> filter(fn: (r) => r[\"_field\"] == \"battery\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"bedroom_sensor_voltage\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesBedroom = RawSeriesBedroom\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Bedroom\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesBedroom |> yield()",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P7D7E27EDDA4DFA74"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\n\nRawSeriesBatroom = from(bucket: \"home_assistant\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mV\")\n  |> filter(fn: (r) => r[\"_field\"] == \"battery\")\n  |> filter(fn: (r) => r[\"domain\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"entity_id\"] == \"bathroom_sensor_voltage\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n      \nNamedSeriesBathroom = RawSeriesBatroom\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Bathroom\"}))\n  |> keep(columns:FinalOutput)\n\nNamedSeriesBathroom |> yield()",
          "refId": "E"
        }
      ],
      "title": "Sensor battery status in mV",
      "transformations": [
        {
          "id": "seriesToRows",
          "options": {
            "reducers": []
          }
        }
      ],
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 33,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Zigbee Dashboard",
  "uid": "-rwms5fGz",
  "version": 1,
  "weekStart": ""
}
