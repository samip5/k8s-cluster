---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
  labels:
    component.skylab.fi/part-of: standard-helm-release
spec:
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 48.3.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 15m
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
    # Force recreation due to Helm not properly patching Deployment with e.g. added port,
    # causing spurious drift detection
    force: true
  postRenderers:
    - kustomize:
        patches:
          - target:
              # Ignore these objects from Flux diff as they are mutated from chart hooks
              kind: (ValidatingWebhookConfiguration|MutatingWebhookConfiguration)
              name: kube-prometheus-stack-admission
            patch: |
              - op: add
                path: /metadata/annotations/helm.toolkit.fluxcd.io~1driftDetection
                value: disabled
          - target:
              # Ignore these objects from Flux diff as they are mutated at apply time but not
              # at dry-run time
              kind: PrometheusRule
            patch: |
              - op: add
                path: /metadata/annotations/helm.toolkit.fluxcd.io~1driftDetection
                value: disabled
  values:
    fullnameOverride: prom
    defaultRules:
      enabled: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverSlos: true
        kubelet: true
        kubeProxy: false
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      tolerations:
        - effect: "NoExecute"
          operator: "Exists"
        - effect: "NoSchedule"
          operator: "Exists"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Prometheus
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: [ "__name__" ]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)"
            action: keep
          - sourceLabels: [ "node" ]
            targetLabel: instance
            action: replace
      kubeApiServer:
        enabled: true
        serviceMonitor:
          metricRelabelings:
            # Remove duplicate metrics
            - sourceLabels: [ "__name__" ]
              regex: "(aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)"
              action: keep
            # Remove high cardinality metrics
            - sourceLabels: [ "__name__" ]
              regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
              action: drop
            - sourceLabels: [ "__name__" ]
              regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
              action: drop
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 172.16.0.2
    kubeScheduler:
      enabled: true
      endpoints: *cp
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: [ "__name__" ]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authenticated_user|authentication|disabled_metric|go|hidden_metric|kubernetes_build|kubernetes_feature|leader_election|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scheduler|scrape_duration|scrape_samples|scrape_series|workqueue)_(.+)"
            action: keep
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: true

    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "discord"
            webhook_configs:
              - url: http://alertmanager-discord:9094
                send_resolved: true
        route:
          group_by: [ "alertname", "job" ]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "discord"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
        ingress:
          enabled: true
          pathType: Prefix
          annotations:
            kubernetes.io/ingress.class: gce
          hosts:
            - &host "alerts.${CLUSTER_DOMAIN}"
          tls:
            - hosts:
                - *host
        alertmanagerSpec:
          replicas: 1
          storage:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 1Gi

    prometheusOperator:
      resources:
        requests:
          memory: 300Mi
        limits:
          memory: 300Mi
      prometheusConfigReloader:
        resources:
          requests:
            memory: 100Mi
          limits:
            memory: 100Mi
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - "prom.${CLUSTER_DOMAIN}"
        tls:
          - hosts:
              - "prom.{CLUSTER_DOMAIN}"
      thanosService:
        enabled: false
      prometheusSpec:
        replicas: 1
        podAntiAffinity: hard
        retentionSize: "6GB"
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            memory: 3123Mi
          limits:
            memory: 3123Mi


