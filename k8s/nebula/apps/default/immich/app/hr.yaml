---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app immich
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    controllers:
      immich:
        type: deployment
        replicas: 1
        containers:
          main:
            image: &img
              repository: ghcr.io/immich-app/immich-server
              tag: v1.103.1
            command: &cmd [ "tini", "--", "node", "/usr/src/app/dist/main" ]
            args: [ "immich" ]
            env: &env
              TZ: "${CONFIG_TZ}"
              LD_PRELOAD: /usr/lib/x86_64-linux-gnu/libmimalloc.so.2
              NODE_ENV: production
              LOG_LEVEL: verbose
              IMMICH_MEDIA_LOCATION: &pvc /data
              IMMICH_METRICS: "true"
              IMMICH_SERVER_URL: http://immich.default.svc.cluster.local:3001
              IMMICH_MACHINE_LEARNING_URL: http://immich-ml.default.svc.cluster.local:3003
              REDIS_HOSTNAME: immich-redis.default.svc.cluster.local
              REDIS_PORT: "6379"
            envFrom: &ef
              - secretRef:
                  name: immich-secret
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: [ "ALL" ]
            resources:
              requests:
                cpu: "10m"
                memory: "128Mi"
              limits:
                cpu: "3000m"
                memory: "2Gi"
      microservices:
        type: deployment
        replicas: 3
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            db.home.arpa/pg: pg-home
            prom.home.arpa/kps: allow
          securityContext:
            runAsNonRoot: true
            runAsUser: &uid "568"
            runAsGroup: *uid
            fsGroup: *uid
            fsGroupChangePolicy: Always
            supplementalGroups: [ 44, 104, 109, 128, 226 ] # GPU
            seccompProfile: { type: "RuntimeDefault" }
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: microservices
        containers:
          main:
            image: *img
            command: *cmd
            args: [ "microservices" ]
            env: *env
            securityContext: *sc
            resources:
              requests:
                cpu: "100m"
                memory: "300Mi"
                gpu.intel.com/i915: "1"
              limits:
                cpu: "1000m" # my machine will actually die
                memory: "2Gi"
                gpu.intel.com/i915: "1"
      ml:
        type: statefulset
        replicas: 3
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: ml
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.103.1
            env: *env
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "1Gi"
              limits:
                cpu: "1000m"
                memory: "4Gi"
        statefulset:
          volumeClaimTemplates:
            - name: data
              size: 10Gi
              storageClass: local-path
              accessMode: ReadWriteOnce
              globalMounts:
                - path: /cache
      redis:
        type: deployment
        replicas: 1
        containers:
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "7.2.4"
            command: [ "redis-server", "--save", "300 1", "--appendonly", "yes" ] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "32Mi"
              limits:
                cpu: "1000m"
                memory: "512Mi"
    service:
      immich:
        controller: immich
        ports:
          http:
            port: 3001
          metrics:
            port: 8081
      microservices:
        controller: microservices
        ports:
          metrics:
            port: 8081
      ml:
        controller: ml
        ports:
          http:
            port: 3003
      redis:
        controller: redis
        ports:
          http:
            port: 6379
    ingress:
      main:
        className: nginx-internal
        hosts:
          - host: &host "photos.skylab.fi"
            paths: &paths
              - path: /
                pathType: Prefix
                service:
                  identifier: immich
                  port: http
        tls:
          - hosts: [ *host ]
    persistence:
      data:
        existingClaim: immich-data
        advancedMounts:
          immich: &mount
            main:
              - subPath: data
                path: *pvc
          microservices: *mount
          redis:
            main:
              - subPath: redis
                path: /data
      misc:
        existingClaim: immich-misc
        advancedMounts:
          immich: &misc
            main:
              - subPath: encodedvideo
                path: /data/encoded-video
              - subPath: thumbs
                path: /data/thumbs
          microservices: *misc
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: tmp
            path: /tmp
          - subPath: geocode
            path: /usr/src/app/.reverse-geocoding-dump
          - subPath: geoname
            path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
          - subPath: transformers
            path: /usr/src/app/.transformers_cache
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid "568"
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
    serviceMonitor:
      immich:
        serviceName: immich
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
      microservices:
        serviceName: microservices
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s



