---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich
  namespace: default
spec:
  interval: 15m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      strategy: uninstall
      retries: 3
  values:
    controllers:
      immich:
        type: deployment
        replicas: 1
        containers:
          main:
            image: &img
              repository: ghcr.io/immich-app/immich-server
              tag: v1.132.3
            env:
              <<: &env-common
                TZ: "Europe/Helsinki"
                IMMICH_MEDIA_LOCATION: &pvc /data
                IMMICH_METRICS: "true"
                IMMICH_MACHINE_LEARNING_URL: http://immich-ml.default.svc.cluster.local:3003
                IMMICH_LOG_LEVEL: info
                IMMICH_IGNORE_MOUNT_CHECK_ERRORS: "true"
                REDIS_HOSTNAME: dragonfly.databases.svc.cluster.local
                REDIS_PORT: "6379"
                REDIS_DBINDEX: 9
              IMMICH_WORKERS_INCLUDE: &server-include 'api'
            envFrom: &ef
              - secretRef:
                  name: immich-secret
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: [ "ALL" ]
            resources:
              limits:
                memory: 2.5Gi
              requests:
                #cpu: 100m
                memory: 2Gi

      microservices:
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          labels:
            db.home.arpa/pg: pg-home
            prom.home.arpa/kps: allow
          securityContext:
            runAsNonRoot: true
            runAsUser: &uid 1000
            runAsGroup: *uid
            fsGroup: *uid
            fsGroupChangePolicy: Always
            supplementalGroups: [ 44, 104, 109, 128, 226 ] # GPU
            seccompProfile: { type: "RuntimeDefault" }
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: microservices
        containers:
          main:
            image: *img
            env:
              <<: *env-common
              IMMICH_WORKERS_EXCLUDE: *server-include
            envFrom: *ef
            securityContext: *sc
            resources:
              limits:
                memory: 6Gi
                gpu.intel.com/i915: "1"
              requests:
                cpu: 50m
                memory: 3Gi
                gpu.intel.com/i915: "1"
#      ml:
#        type: statefulset
#        replicas: 1
#        pod:
#          topologySpreadConstraints:
#            - maxSkew: 1
#              topologyKey: kubernetes.io/hostname
#              whenUnsatisfiable: DoNotSchedule
#              labelSelector:
#                matchLabels:
#                  app.kubernetes.io/name: *app
#                  app.kubernetes.io/instance: *app
#                  app.kubernetes.io/component: ml
#        containers:
#          main:
#            image:
#              repository: ghcr.io/immich-app/immich-machine-learning
#              tag: v1.131.2
#            env:
#              <<: *env-common
#              MPLCONFIGDIR: /tmp/matplotlib
#            securityContext: *sc
#            resources:
#              limits:
#                memory: 1860Mi
#              requests:
#                cpu: 70m
#                memory: 1860Mi
#        statefulset:
#          volumeClaimTemplates:
#            - name: data
#              size: 10Gi
#              storageClass: local-hostpath
#              accessMode: ReadWriteOnce
#              globalMounts:
#                - path: /cache
    service:
      immich:
        controller: immich
        ports:
          http:
            port: &port 2283
          metrics:
            port: 8081
      microservices:
        controller: microservices
        ports:
          http:
            port: 2283
          metrics:
            port: 8081
#      ml:
#        controller: ml
#        ports:
#          http:
#            port: &ml-port 3003

    route:
      server:
        annotations:
          external-dns.alpha.kubernetes.io/target: "ingress.skylab.fi"
        hostnames:
          - "photos.skylab.fi"
        parentRefs:
          - name: envoy-internal
            namespace: networking
            sectionName: https
          - name: envoy-external
            namespace: networking
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      data:
        existingClaim: immich-data
        advancedMounts:
          immich: &mount
            main:
              - subPath: data
                path: *pvc
          microservices: *mount
      misc:
        existingClaim: immich-misc
        advancedMounts:
          immich: &misc
            main:
              - subPath: encodedvideo
                path: /data/encoded-video
              - subPath: thumbs
                path: /data/thumbs
          microservices: *misc
      tmp:
        type: emptyDir
        medium: Memory
        globalMounts:
          - subPath: tmp
            path: /tmp
          - subPath: geocode
            path: /usr/src/app/.reverse-geocoding-dump
          - subPath: geoname
            path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
          - subPath: transformers
            path: /usr/src/app/.transformers_cache
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
    serviceMonitor:
      immich:
        serviceName: immich
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
      microservices:
        serviceName: microservices
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s



