# Source: pod-gateway/templates/common.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: pod-gateway
  labels:
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/version: v1.8.1
    helm.sh/chart: pod-gateway-6.5.1
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: pod-gateway
      app.kubernetes.io/name: pod-gateway
  policyTypes:
    - Egress
  egress:
    - ports:
        - port: 51820
          protocol: UDP
        - port: 1637
          protocol: UDP
        - port: 53
          protocol: UDP
      to:
        - ipBlock:
            cidr: 0.0.0.0/0
        - ipBlock:
            cidr: ::/0
    - to:
        - namespaceSelector: {}
---
# Source: pod-gateway/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "pod-gateway"
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
data:
  settings.sh: |
    #!/bin/sh
    # Generated by pod-gateway
    DNS_LOCAL_CIDRS="local"
    NOT_ROUTED_TO_GATEWAY_CIDRS="10.0.0.0/8 192.168.0.0/16"
    VPN_BLOCK_OTHER_TRAFFIC="false"
    VPN_INTERFACE="wg0"
    VPN_LOCAL_CIDRS="10.0.0.0/8 192.168.0.0/16"
    VPN_TRAFFIC_PORT="51820"
    VXLAN_GATEWAY_FIRST_DYNAMIC_IP="20"
    VXLAN_ID="44"
    VXLAN_IP_NETWORK="172.16.1"
  nat.conf: |
    # Generated by pod-gateway
  nat6.conf: |
    # Generated by pod-gateway
---
# Source: pod-gateway/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: pod-gateway
  labels:
    app.kubernetes.io/service: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/version: v1.8.1
    helm.sh/chart: pod-gateway-6.5.1
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4789
      targetPort: http
      protocol: UDP
      name: http
  selector:
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/name: pod-gateway
---
# Source: pod-gateway/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pod-gateway-webhook
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/name: pod-gateway-webhook
    app.kubernetes.io/instance: pod-gateway
---
# Source: pod-gateway/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-gateway
  labels:
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/version: v1.8.1
    helm.sh/chart: pod-gateway-6.5.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: pod-gateway
      app.kubernetes.io/instance: pod-gateway
  template:
    metadata:
      annotations:
        configmap.reloader.stakater.com/reload: vpn-gateway-pod-gateway
        secret.reloader.stakater.com/reload: vpn-gateway-vpnconfig
      labels:
        app.kubernetes.io/name: pod-gateway
        app.kubernetes.io/instance: pod-gateway
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        - command:
            - /bin/gateway_init.sh
          image: registry.skysolutions.fi/library/pod-gateway:230724
          imagePullPolicy: IfNotPresent
          name: routes
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
      containers:
        - name: pod-gateway
          image: registry.skysolutions.fi/library/pod-gateway:230724
          imagePullPolicy: IfNotPresent
          command:
            - /bin/gateway_sidecar.sh
          securityContext:
            capabilities:
              add:
                - NET_RAW
                - NET_ADMIN
          ports:
            - name: http
              containerPort: 4789
              protocol: UDP
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
        - env:
            - name: VPN_TYPE
              value: wireguard
            - name: VPN_SERVICE_PROVIDER
              value: airvpn
            - name: VPN_INTERFACE
              value: wg0
            - name: FIREWALL
              value: "off"
            - name: DOT
              value: "off"
            - name: FIREWALL_VPN_INPUT_PORTS
              value: 51820,55633
            - name: SERVER_REGIONS
              value: Europe
          envFrom:
            - secretRef:
                name: vpn-gateway-vpnconfig
          image: docker.io/qmcgaw/gluetun:v3.38.0
          name: gluetun
          securityContext:
            privileged: true
#            capabilities:
#              add:
#                - NET_ADMIN
        - command:
            - /bin/sh
            - -c
            - sleep infinity
          image: ghcr.io/nicolaka/netshoot:v0.11
          name: netshoot
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
      volumes:
        - name: config
          configMap:
            defaultMode: 365
            name: pod-gateway
---
# Source: pod-gateway/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-gateway-webhook
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: pod-gateway-webhook
      app.kubernetes.io/instance: pod-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pod-gateway-webhook
        app.kubernetes.io/instance: pod-gateway
    spec:
      volumes:
        - name: certs
          secret:
            secretName: pod-gateway-webhook-tls
            defaultMode: 420
      containers:
        - name: webhook
          image: ghcr.io/angelnu/gateway-admision-controller:v3.10.0@sha256:a8ed630613de277244dfe203cd11d05905d7eeba8d8c41e399b02ee9a847b2f5
          args:
            - --webhook-listen-address=:8080
            - --gateway=pod-gateway.default.svc.cluster.local
            - --DNS=172.16.1.1
            - --configmapName=pod-gateway
            - --setGatewayLabel=setGateway
            - --setGatewayAnnotation=setGateway
            # Static
            - --tls-cert-file-path=/tls/tls.crt
            - --tls-key-file-path=/tls/tls.key
            - --DNSPolicy=None
            # Init container
            - --initImage=registry.skysolutions.fi/library/pod-gateway:230724
            - --initImagePullPol=IfNotPresent
            - --initCmd=/bin/client_init.sh
            - --initMountPoint=/config
            # Sidecar container
            - --sidecarImage=registry.skysolutions.fi/library/pod-gateway:230724
            - --sidecarImagePullPol=IfNotPresent
            - --sidecarCmd=/bin/client_sidecar.sh
            - --sidecarMountPoint=/config
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: certs
              readOnly: true
              mountPath: /tls
          livenessProbe:
            httpGet:
              path: /wh/health
              port: 8080
              scheme: HTTPS
            initialDelaySeconds: 1
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /wh/health
              port: 8080
              scheme: HTTPS
            initialDelaySeconds: 1
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          startupProbe:
            httpGet:
              path: /wh/health
              port: 8080
              scheme: HTTPS
            timeoutSeconds: 1
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 30
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
---
# Source: pod-gateway/templates/webhook-pki.yaml
# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pod-gateway-webhook-ca
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: pod-gateway-webhook-ca
  duration: 43800h # 5y
  issuerRef:
    name: pod-gateway-webhook-selfsign
    kind: Issuer
  commonName: "ca.pod-gateway.cert-manager"
  isCA: true
---
# Source: pod-gateway/templates/webhook-pki.yaml
# Finally, generate a serving certificate for the webhook to use
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pod-gateway-webhook-tls
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: pod-gateway-webhook-tls
  duration: 8760h # 1y
  issuerRef:
    name: pod-gateway-webhook-ca
    kind: Issuer
  dnsNames:
    - pod-gateway-webhook
    - pod-gateway-webhook.default
    - pod-gateway-webhook.default.svc
---
# Source: pod-gateway/templates/webhook-pki.yaml
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: pod-gateway-webhook-selfsign
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selfSigned: {}
---
# Source: pod-gateway/templates/webhook-pki.yaml
# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: pod-gateway-webhook-ca
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
spec:
  ca:
    secretName: pod-gateway-webhook-ca
---
# Source: pod-gateway/templates/webhook-admissionregistration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: "pod-gateway"
  labels:
    helm.sh/chart: pod-gateway-6.5.1
    app.kubernetes.io/name: pod-gateway
    app.kubernetes.io/instance: pod-gateway
    app.kubernetes.io/version: "v1.8.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/inject-ca-from: "default/pod-gateway-webhook-tls"
webhooks:
  - name: "pod-gateway.svc.cluster.local"
    namespaceSelector:
      matchLabels:
        vpn-routed-gateway: "true"
    rules:
      - apiGroups:   [""]
        apiVersions: ["v1"]
        operations:  ["CREATE"]
        resources:   ["pods"]
        scope:       "Namespaced"
    clientConfig:
      service:
        namespace: "vpn"
        name: pod-gateway-webhook
        path: /wh/mutating/setgateway
        port: 8080
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
    timeoutSeconds: 5
